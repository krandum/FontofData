#  Phusion Passenger - https://www.phusionpassenger.com/
#  Copyright (c) 2010-2017 Phusion Holding B.V.
#
#  "Passenger", "Phusion Passenger" and "Union Station" are registered
#  trademarks of Phusion Holding B.V.
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#  THE SOFTWARE.

# This file uses the cxxcodebuilder API. Learn more at:
# https://github.com/phusion/cxxcodebuilder

require 'phusion_passenger/nginx/config_options'

def main
  set_indent_string '    '
  comment copyright_header_for(__FILE__), 1

  separator

  comment %q{
    CreateLocationConfig.c is automatically generated from CreateLocationConfig.c.cxxcodebuilder,
    using definitions from src/ruby_supportlib/phusion_passenger/nginx/config_options.rb.
    Edits to CreateLocationConfig.c will be lost.

    To update CreateLocationConfig.c:
      rake nginx

    To force regeneration of CreateLocationConfig.c:
      rm -f src/nginx_module/CreateLocationConfig.c
      rake src/nginx_module/CreateLocationConfig.c
  }

  separator

  function('void generated_set_conf_part(passenger_loc_conf_t  *conf)') do
    filter_eligible_options(LOCATION_CONFIGURATION_OPTIONS).each do |option|
      if option[:type] == :string
        add_code %Q{
          conf->#{struct_field_for(option)}.data = NULL;
          conf->#{struct_field_for(option)}.len  = 0;
        }
      elsif option[:type] == :integer || option[:type] == :flag
        add_code %Q{
          conf->#{struct_field_for(option)} = NGX_CONF_UNSET;
        }
      elsif option[:type] == :uinteger
        add_code %Q{
          conf->#{struct_field_for(option)} = NGX_CONF_UNSET_UINT;
        }
      elsif option[:type] == :string_array
        add_code %Q{
          conf->#{struct_field_for(option)} = NGX_CONF_UNSET_PTR;
        }
      elsif option[:type] == :string_keyval
        add_code %Q{
          conf->#{struct_field_for(option)} = NULL;
        }
      else
        raise "Unknown option type #{option[:type].inspect} for option #{option[:name]}"
      end
    end
  end
end

def filter_eligible_options(options)
  options.reject do |option|
    option[:alias_for] ||
      option.fetch(:field, true).nil? ||
      option[:field].to_s =~ /\./ ||
      option[:auto_generate_nginx_create_code] == false
  end
end

def struct_field_for(option)
  if option.has_key?(:field)
    option[:field]
  else
    option[:name].sub(/^passenger_/, '')
  end
end

main
